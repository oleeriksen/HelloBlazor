@using HelloBlazor.Shared;
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject NavigationManager NavManager
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">HelloBlazor</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home ( @LoggedIn )
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="todo">
                <span class="oi oi-list" aria-hidden="true"></span> TO-DO list
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="product">
                <span class="oi oi-envelope-closed" aria-hidden="true"></span> Product
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="shopping">
                <span class="oi oi-cart" aria-hidden="true"></span> Shopping
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    BEUser? currentUser;

    private string LoggedIn
    {
        get
        {
            return currentUser != null ? currentUser.Email : "None";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        currentUser = await localStore.GetItemAsync<BEUser>("user");
    }
}

